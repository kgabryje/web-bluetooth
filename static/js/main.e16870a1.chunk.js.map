{"version":3,"sources":["helpers.js","components/Button.js","components/BLEConfigHandler.js","components/SensorDataHandler.js","components/Spinner.js","App.js","serviceWorker.js","index.js","components/Layout.js"],"names":["calcAccFromSensorOutput","val","FilledButton","styled","button","_templateObject","space","PoseContainer","lazy","__webpack_require__","e","then","bind","BLEConfigHandler","React","memo","_ref","characteristicState","dataHandler","_useContext","useContext","SensorTagContext","uuids","service","setErrorMessage","accDataCharacteristic","setAccDataCharacteristic","stopNotifications","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","characteristic","wrap","_context","prev","next","abrupt","removeEventListener","prevChar","objectSpread","isNotifying","t0","message","stop","apply","this","arguments","resumeNotifications","_ref3","_callee2","_context2","startNotifications","addEventListener","useMemo","_callee3","configCharacteristic","dataCharacteristic","_context3","getCharacteristic","configCharUUID","sent","writeValue","Uint8Array","of","dataCharUUID","console","log","react_default","createElement","Layout","justifyContent","mt","onClick","Chart","SensorDataHandler","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","values","setValues","firstDataIndex","useRef","handleAccDataChange","useCallback","event","buffer","target","value","output","getUint8","map","prevValues","newValues","concat","toConsumableArray","Math","hypot","length","shift","current","width","maxHeight","data","firstIndex","spinnerAnimation","keyframes","Spinner_templateObject","round","_templateObject2","Spinner","div","_templateObject3","createContext","ACC_UUIDS","serviceUUID","App","accService","setAccService","errorMessage","_useState5","_useState6","showSpinner","setShowSpinner","getService","device","server","navigator","bluetooth","requestDevice","filters","name","optionalServices","gatt","connect","getPrimaryService","contextValue","react","fallback","Provider","position","alignItems","top","bottom","left","right","react_pose_es","App_PoseContainer","key","SensorDataHandler_SensorDataHandler","style","color","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","display","prop","cssProperty","numberToPx","height","alias","Box","boxSizing","minHeight","minWidth","maxWidth","fontSize","flex","order","alignSelf","borders","borderColor","zIndex","displayName","propTypes","_Users_kamilgabryjelski_web_bluetooth_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","Flex","flexWrap","flexDirection","Container","defaultProps","mx","px"],"mappings":"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","file":"static/js/main.e16870a1.chunk.js","sourcesContent":["export const calcAccFromSensorOutput = val =>\n  val > 127 ? (val - 256) / 64 : val / 64;","import styled from \"styled-components\";\nimport { space } from \"styled-system\";\n\nexport const FilledButton = styled.button`\n  ${space};\n  outline: none;\n  border-radius: 26.5px;\n  transition: all 0.2s ease-in-out;\n  min-width: 160px;\n  max-width: 192px;\n\n  padding: 9px 19px;\n\n  background-color: #2924fb;\n  border: solid 2px #2924fb;\n\n  font-size: 15px;\n  font-weight: bold;\n  color: white;\n\n  :hover {\n    background-color: #6e6afc;\n    border-color: #6e6afc;\n    cursor: pointer;\n  }\n\n  :active {\n    background-color: #a5a3fd;\n    border-color: #a5a3fd;\n  }\n`;\n","import React, { lazy, useContext, useMemo } from \"react\";\nimport { SensorTagContext } from \"../App\";\nimport { FilledButton } from \"./Button\";\nimport { Flex } from \"./Layout\";\nconst PoseContainer = lazy(() => import(\"./Appear\"));\n\nexport const BLEConfigHandler = React.memo(\n  ({ characteristicState, dataHandler }) => {\n    const { uuids, service, setErrorMessage } = useContext(SensorTagContext);\n    const {\n      accDataCharacteristic,\n      setAccDataCharacteristic\n    } = characteristicState;\n\n    const stopNotifications = async () => {\n      const characteristic = accDataCharacteristic.characteristic;\n      if (!characteristic) {\n        return;\n      }\n      try {\n        await characteristic.stopNotifications();\n        characteristic.removeEventListener(\n          \"characteristicvaluechanged\",\n          dataHandler\n        );\n\n        setAccDataCharacteristic(prevChar => ({\n          ...prevChar,\n          isNotifying: false\n        }));\n        setErrorMessage(\"\");\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n    };\n\n    const resumeNotifications = async () => {\n      const characteristic = accDataCharacteristic.characteristic;\n      if (!characteristic) {\n        return;\n      }\n      try {\n        await characteristic.startNotifications();\n        characteristic.addEventListener(\n          \"characteristicvaluechanged\",\n          dataHandler\n        );\n        setAccDataCharacteristic(prevChar => ({\n          ...prevChar,\n          isNotifying: true\n        }));\n        setErrorMessage(\"\");\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n    };\n\n    useMemo(async () => {\n      if (!service) {\n        return;\n      }\n\n      try {\n        const configCharacteristic = await service.getCharacteristic(\n          uuids.configCharUUID\n        );\n        await configCharacteristic.writeValue(Uint8Array.of(1)); // enable acc sensor\n\n        const dataCharacteristic = await service.getCharacteristic(\n          uuids.dataCharUUID\n        ); // read acc sensor output\n        await dataCharacteristic.startNotifications();\n        dataCharacteristic.addEventListener(\n          \"characteristicvaluechanged\",\n          dataHandler\n        );\n\n        setAccDataCharacteristic({\n          characteristic: dataCharacteristic,\n          isNotifying: true\n        });\n        setErrorMessage(\"\");\n      } catch (error) {\n        console.log(\"dupa \" + error.message);\n        setErrorMessage(error.message);\n      }\n    }, [\n      service,\n      uuids,\n      dataHandler,\n      setAccDataCharacteristic,\n      setErrorMessage\n    ]);\n\n    return (\n      <Flex justifyContent=\"center\" mt=\"100px\">\n        {service && accDataCharacteristic.characteristic && (\n          <PoseContainer>\n            {accDataCharacteristic.isNotifying ? (\n              <FilledButton onClick={stopNotifications}>\n                Stop reading data\n              </FilledButton>\n            ) : (\n              <FilledButton onClick={resumeNotifications}>\n                Start reading data\n              </FilledButton>\n            )}\n          </PoseContainer>\n        )}\n      </Flex>\n    );\n  }\n);\n","import React, { useState, useCallback, useRef, lazy } from \"react\";\nimport { calcAccFromSensorOutput } from \"../helpers\";\nimport { BLEConfigHandler } from \"./BLEConfigHandler\";\nimport { Box } from \"./Layout\";\nconst Chart = lazy(() => import(\"./chart/Chart\"));\n\nexport const SensorDataHandler = () => {\n  const [accDataCharacteristic, setAccDataCharacteristic] = useState({\n    characteristic: null,\n    isNotifying: false\n  });\n  const [values, setValues] = useState([]);\n  const firstDataIndex = useRef(0);\n\n  const handleAccDataChange = useCallback(event => {\n    const buffer = event.target.value;\n    const output = [\n      buffer.getUint8(0), // axisX\n      buffer.getUint8(1), // axisY\n      buffer.getUint8(2) // axisZ\n    ].map(calcAccFromSensorOutput);\n\n    setValues(prevValues => {\n      const newValues = [...prevValues, Math.hypot(...output)];\n      if (newValues.length > 20) {\n        newValues.shift();\n        firstDataIndex.current++;\n      }\n      return newValues;\n    });\n  }, []);\n\n  return (\n    <Box width=\"100%\" maxHeight=\"100%\">\n      <Chart data={values} firstIndex={firstDataIndex.current} />\n      <BLEConfigHandler\n        characteristicState={{\n          accDataCharacteristic,\n          setAccDataCharacteristic\n        }}\n        dataHandler={handleAccDataChange}\n      />\n    </Box>\n  );\n};\n","import styled, { keyframes } from \"styled-components\";\n\nconst spinnerAnimation = keyframes`\n  0% {\n    box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;\n  }\n  5%,\n  95% {\n    box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;\n  }\n  10%,\n  59% {\n    box-shadow: 0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em;\n  }\n  20% {\n    box-shadow: 0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em, -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em, -0.749em -0.34em 0 -0.477em;\n  }\n  38% {\n    box-shadow: 0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em, -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em, -0.82em -0.09em 0 -0.477em;\n  }\n  100% {\n    box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;\n  }\n`;\n\nconst round = keyframes`\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n`;\n\nexport const Spinner = styled.div`\n  color: #2924fb;\n  font-size: 90px;\n  text-indent: -9999em;\n  overflow: hidden;\n  width: 1em;\n  height: 1em;\n  border-radius: 50%;\n  margin: 72px auto;\n  position: relative;\n  transform: translateZ(0);\n  animation: ${spinnerAnimation} 1.7s infinite ease, ${round} 1.7s infinite ease;\n`;\n","import React, { useState, Suspense, lazy } from \"react\";\nimport { PoseGroup } from \"react-pose\";\nimport { SensorDataHandler } from \"./components/SensorDataHandler\";\nimport { FilledButton } from \"./components/Button\";\nimport { Container } from \"./components/Layout\";\nimport { Spinner } from \"./components/Spinner\";\n\nconst PoseContainer = lazy(() => import(\"./components/Appear\"));\n\nexport const SensorTagContext = React.createContext({\n  uuids: {},\n  service: {},\n  setErrorMessage: () => {}\n});\n\nconst ACC_UUIDS = {\n  serviceUUID: \"f000aa10-0451-4000-b000-000000000000\",\n  dataCharUUID: \"f000aa11-0451-4000-b000-000000000000\",\n  configCharUUID: \"f000aa12-0451-4000-b000-000000000000\"\n};\n\nconst App = () => {\n  const [accService, setAccService] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showSpinner, setShowSpinner] = useState(false);\n\n  const getService = async () => {\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{ name: \"SensorTag\" }],\n        optionalServices: [ACC_UUIDS.serviceUUID]\n      });\n      setShowSpinner(true);\n      const server = await device.gatt.connect();\n      const service = await server.getPrimaryService(ACC_UUIDS.serviceUUID);\n\n      setAccService(service);\n      setShowSpinner(false);\n      setErrorMessage(\"\");\n    } catch (error) {\n      setErrorMessage(error.message);\n      setShowSpinner(false);\n    }\n  };\n\n  const contextValue = {\n    uuids: ACC_UUIDS,\n    service: accService,\n    setErrorMessage: setErrorMessage\n  };\n\n  return (\n    <Suspense fallback={<div />}>\n      <SensorTagContext.Provider value={contextValue}>\n        <Container\n          position=\"absolute\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          top={0}\n          bottom={0}\n          left={0}\n          right={0}\n        >\n          <PoseGroup>\n            {accService ? (\n              <PoseContainer width=\"100%\" key=\"chart\">\n                <SensorDataHandler />\n              </PoseContainer>\n            ) : (\n              <PoseContainer key=\"spinner\">\n                {showSpinner ? (\n                  <Spinner />\n                ) : (\n                  <FilledButton onClick={getService}>\n                    Find SensorTag\n                  </FilledButton>\n                )}\n              </PoseContainer>\n            )}\n          </PoseGroup>\n          <p style={{ color: \"#ff2500\" }}>{errorMessage}</p>\n        </Container>\n      </SensorTagContext.Provider>\n    </Suspense>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import styled from \"styled-components\";\nimport {\n  style,\n  space,\n  color,\n  width,\n  minHeight,\n  maxHeight,\n  minWidth,\n  maxWidth,\n  fontSize,\n  flex,\n  order,\n  alignSelf,\n  position,\n  borders,\n  borderColor,\n  zIndex,\n  flexWrap,\n  flexDirection,\n  alignItems,\n  justifyContent\n} from \"styled-system\";\n\nconst display = style({\n  prop: \"display\",\n  cssProperty: \"display\",\n  numberToPx: false\n});\n\nconst height = style({\n  prop: \"height\",\n  alias: \"h\",\n  numberToPx: true\n});\n\nexport const Box = styled(\"div\")(\n  {\n    boxSizing: \"border-box\"\n  },\n  space,\n  color,\n  width,\n  minHeight,\n  maxHeight,\n  minWidth,\n  maxWidth,\n  fontSize,\n  flex,\n  order,\n  alignSelf,\n  display,\n  height,\n  position,\n  borders,\n  borderColor,\n  zIndex\n);\n\nBox.displayName = \"Box\";\n\nBox.propTypes = {\n  ...space.propTypes,\n  ...color.propTypes,\n  ...width.propTypes,\n  ...fontSize.propTypes\n};\n\nexport const Flex = styled(Box)(\n  {\n    display: \"flex\"\n  },\n  flexWrap,\n  flexDirection,\n  alignItems,\n  justifyContent,\n  display,\n  height,\n  maxWidth,\n  maxHeight,\n  position,\n  borders,\n  borderColor,\n  zIndex\n);\n\nFlex.displayName = \"Flex\";\n\nFlex.propTypes = {\n  ...flexWrap.propTypes,\n  ...flexDirection.propTypes,\n  ...alignItems.propTypes,\n  ...justifyContent.propTypes\n};\n\n\nexport const Container = styled(Flex)`\n  ${position};\n  max-width: 64em;\n`;\n\nContainer.defaultProps = {\n  flexDirection: \"column\",\n  mx: \"auto\",\n  px: [\"8px\", \"64px\", \"none\"],\n};\n"],"sourceRoot":""}